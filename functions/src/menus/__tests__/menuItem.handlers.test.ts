/**
 * Ê∏¨Ë©¶ menuItem.handlers.js ‰∏≠Á??πÊ?
 */

// Ê®°Êì¨ firebase-admin
const serverTimestampMock = jest.fn().mockReturnValue('mocked_server_timestamp');
const mockSet = jest.fn().mockResolvedValue(true);
const mockGet = jest.fn();
const mockDoc = jest.fn().mockReturnValue({
  set: mockSet,
  get: mockGet,
  update: jest.fn().mockResolvedValue(true),
  delete: jest.fn().mockResolvedValue(true)
});

// Ê®°Êì¨ count() ?πÊ?
const mockCount = jest.fn().mockReturnValue({
  get: jest.fn().mockResolvedValue({
    data: () => ({ count: 10 })
  })
});

// Ê®°Êì¨ Firestore ?•Ë©¢?πÊ?
const mockWhere = jest.fn().mockReturnThis();
const mockOrderBy = jest.fn().mockReturnThis();
const mockLimit = jest.fn().mockReturnThis();
const mockOffset = jest.fn().mockReturnThis();
let mockStartAfter;

const mockCollection = jest.fn().mockImplementation(() => ({
  doc: mockDoc,
  where: mockWhere,
  orderBy: mockOrderBy,
  get: mockGet,
  limit: mockLimit,
  offset: mockOffset,
  count: mockCount,
  startAfter: mockStartAfter
}));

const mockDb = { collection: mockCollection };

// Ê®°Êì¨ Zod È©óË?
const mockSafeParse = jest.fn();
const createMenuItemSchema = {
  safeParse: mockSafeParse
};

// ÂøÖÈ??®Â??•Ë¢´Ê∏¨Ë©¶Ê®°Â?‰πãÂ??≤Ë?Ê®°Êì¨
jest.mock('firebase-admin', () => ({
  initializeApp: jest.fn(),
  firestore: jest.fn(() => mockDb),
  credential: {
    applicationDefault: jest.fn()
  }
}));

// ?¥Êé•‰øÆÊîπÂ∞éÂÖ•ÂæåÁ? admin Â∞çË±°
const admin = require('firebase-admin');
// Ê∑ªÂ? FieldValue.serverTimestamp
admin.firestore.FieldValue = {
  serverTimestamp: serverTimestampMock
};
// Ê∑ªÂ? Timestamp È°ûÂ?
admin.firestore.Timestamp = class Timestamp {
  seconds: number;
  nanoseconds: number;
  
  constructor(seconds: number, nanoseconds: number) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;
  }
  
  toDate() {
    return new Date(this.seconds * 1000);
  }
};

// Ê®°Êì¨ uuid
jest.mock('uuid', () => ({
  v4: jest.fn().mockReturnValue('test-item-uuid-123')
}));

// Ê®°Êì¨ functions.logger
jest.mock('firebase-functions', () => ({
  logger: {
    info: jest.fn(),
    error: jest.fn(),
    warn: jest.fn()
  }
}));

// Ê∫ñÂ?Ê∏¨Ë©¶
// ‰∏çÁõ¥?•Â??•express?ÑRequest?åResponse‰ª•ÈÅø?çË?‰∏äÂ±§ËÆäÊï∏Ë°ùÁ?
// const { Request, Response } = require('express');

describe('MenuItem Handlers - createMenuItem', () => {
  // Â∞éÂÖ•Ë¢´Ê∏¨Ë©¶Á??ïÁ???
  let { createMenuItem } = require('../menuItem.handlers');

  // ?üÂ?Ê®°Á??ÑÂ??®Ô??π‰æø?ëÂÄëÂú®Ê∏¨Ë©¶?ç‰øÆ?πÊ®°?¨ÂØ¶??
  const handlers = require('../menuItem.handlers');
  
  // Ê∏¨Ë©¶?∏Ê?
  let mockRequest, mockResponse;
  let jsonSpy, statusJsonSpy;
  const testTenantId = 'test-tenant-id';
  const testStoreId = 'test-store-id';
  const testUserId = 'test-user-123';
  const testCategoryId = 'category-1';

  beforeEach(() => {
    // Ê∏ÖÁ??Ä?âÊ®°??
    mockSet.mockClear();
    mockDoc.mockClear();
    mockCollection.mockClear();
    mockGet.mockClear();
    mockSafeParse.mockReset();
    
    // Ê≥®ÂÖ•Ê®°Êì¨?ÑcreateMenuItemSchema
    handlers.createMenuItemSchema = createMenuItemSchema;
    
    // ?µÂª∫Ê®°Êì¨Ë´ãÊ??åÈüø??
    jsonSpy = jest.fn();
    statusJsonSpy = jest.fn().mockReturnValue({ json: jsonSpy });
    
    mockRequest = {
      user: {
        uid: testUserId,
        tenantId: testTenantId,
        storeId: testStoreId,
        role: 'tenant_admin'
      },
      body: {
        name: '?ÜÁöÆ?ûÊ?',
        description: 'È¶ôË?Â§öÊ??ÑÊ??åÈ???,
        categoryId: testCategoryId,
        price: 80,
        discountPrice: 70,
        imageUrl: 'http://example.com/chicken.jpg',
        stockStatus: 'in_stock',
        stockQuantity: 50
      }
    };
    
    mockResponse = {
      status: statusJsonSpy,
      json: jsonSpy
    };
    
    // ÈªòË??ÖÊ?‰∏ãÔ?ZodÈ©óË??öÈ?
    mockSafeParse.mockReturnValue({
      success: true,
      data: mockRequest.body
    });
  });

  // Ê∏¨Ë©¶Ê°à‰?1: ?êÂ??µÂª∫?úÂñÆ?ÅÈ?
  test('?êÂ??µÂª∫?úÂñÆ?ÅÈ?‰∏¶Ë???01?Ä??, async () => {
    // Ê®°Êì¨?ÜÈ?Â≠òÂú®
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => ({
        tenantId: testTenantId,
        name: 'Main Dishes'
      })
    });
    
    // Ê®°Êì¨?µÂª∫ÂæåÁ??ÖÁõÆ?•Ë©¢
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => ({
        id: 'test-item-uuid-123',
        name: '?ÜÁöÆ?ûÊ?',
        createdAt: { toDate: () => new Date() },
        updatedAt: { toDate: () => new Date() }
      })
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await createMenuItem(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰?
    expect(mockCollection).toHaveBeenCalledWith('menuCategories');
    expect(mockDoc).toHaveBeenCalledWith(testCategoryId);
    expect(mockCollection).toHaveBeenCalledWith('menuItems');
    expect(mockDoc).toHaveBeenCalledWith('test-item-uuid-123');
    expect(mockSet).toHaveBeenCalledTimes(1);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(201);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: true,
      message: '?úÂñÆ?ÖÁõÆ?µÂª∫?êÂ?'
    }));
  });

  // Ê∏¨Ë©¶Ê°à‰?2: ?®Êà∂Áº∫Â?ÁßüÊà∂ID
  test('?∂Áî®?∂Áº∫Â∞ëÁ??∂ID?ÇÊ?ËøîÂ?403?ØË™§', async () => {
    // ‰øÆÊîπË´ãÊ?Ôºå‰Ωø?®Êà∂Áº∫Â?ÁßüÊà∂ID
    mockRequest.user = {
      uid: testUserId,
      role: 'tenant_admin'
      // ?ÖÊ?‰∏çË®≠ÁΩ?tenantId
    };
    
    // ?∑Ë?Ê∏¨Ë©¶
    await createMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(403);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: 'Ê≤íÊ?Ê¨äÈ?ÔºöÁî®?∂Áº∫Â∞ëÁ??∂ID'
    }));
    
    // ‰∏çÊ?Ë©≤Âü∑Ë°åÂØ´?•Ê?‰Ω?
    expect(mockSet).not.toHaveBeenCalled();
  });

  // Ê∏¨Ë©¶Ê°à‰?3: È©óË?Â§±Ê?
  test('?∂Ëº∏?•È?Ë≠âÂ§±?óÊ??âË???00?ØË™§', async () => {
    // Ë®≠ÁΩÆ Zod È©óË?Â§±Ê?
    mockSafeParse.mockReturnValue({
      success: false,
      error: {
        errors: [{ message: '?úÂñÆ?ÖÁõÆ?çÁ®±‰∏çËÉΩ?∫Á©∫' }]
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await createMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?
    }));
    
    // ‰∏çÊ?Ë©≤Âü∑Ë°åÂØ´?•Ê?‰Ω?
    expect(mockSet).not.toHaveBeenCalled();
  });

  // Ê∏¨Ë©¶Ê°à‰?4: ?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÜÈ?
  test('?∂Êâæ‰∏çÂà∞?áÂ??ÑË??ÆÂ?È°ûÊ??âË???04?ØË™§', async () => {
    // Ë®≠ÁΩÆ mockGet ËøîÂ?‰∏çÂ??®Á??áÊ?
    mockGet.mockResolvedValueOnce({
      exists: false
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await createMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(404);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: '?áÂ??ÑË??ÆÂ?È°û‰?Â≠òÂú®'
    }));
    
    // ‰∏çÊ?Ë©≤Âü∑Ë°åÂØ´?•Ê?‰Ω?
    expect(mockSet).not.toHaveBeenCalled();
  });

  // Ê∏¨Ë©¶Ê°à‰?5: ?óË©¶Ë®™Â??∂‰?ÁßüÊà∂?ÑË??ÆÂ?È°?
  test('?∂Â?Ë©¶‰Ωø?®ÂÖ∂‰ªñÁ??∂Á??úÂñÆ?ÜÈ??ÇÊ?ËøîÂ?403?ØË™§', async () => {
    // Ë®≠ÁΩÆ mockGet ËøîÂ??∂‰?ÁßüÊà∂?ÑÂ?È°?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => ({
        tenantId: 'other-tenant-id', // ?∂‰?ÁßüÊà∂
        name: 'Other Tenant Category'
      })
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await createMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(403);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: 'Ê≤íÊ?Ê¨äÈ?ÔºöÁÑ°Ê≥ïË®™?èÂÖ∂‰ªñÁ??∂Á??úÂñÆ?ÜÈ?'
    }));
    
    // ‰∏çÊ?Ë©≤Âü∑Ë°åÂØ´?•Ê?‰Ω?
    expect(mockSet).not.toHaveBeenCalled();
  });

  // Ê∏¨Ë©¶Ê°à‰?6: ?∏Ê?Â∫´ÂØ´?•ÈåØË™?
  test('?∂Êï∏?öÂ∫´ÂØ´ÂÖ•?ØË™§?ÇÊ?ËøîÂ?500?ØË™§', async () => {
    // Ë®≠ÁΩÆ mockGet ËøîÂ??âÊ??ÑÂ?È°?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => ({
        tenantId: testTenantId,
        name: 'Main Dishes'
      })
    });
    
    // Ë®≠ÁΩÆ mockSet ?ãÂá∫?∞Â∏∏
    const testError = new Error('?∏Ê?Â∫´ÂØ´?•Â§±??);
    mockSet.mockRejectedValueOnce(testError);
    
    // ?∑Ë?Ê∏¨Ë©¶
    await createMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?
    }));
  });
});

describe('MenuItem Handlers - listMenuItems', () => {
  // Â∞éÂÖ•Ë¢´Ê∏¨Ë©¶Á??ïÁ???
  let { listMenuItems } = require('../menuItem.handlers');
  
  // ?çÁΩÆ?Ä?âÊ®°??
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Ë®≠ÁΩÆ where, orderBy, limit, startAfter ?πÊ??ÑÈ?Ë®≠Ê®°??
    mockWhere.mockReturnThis();
    mockOrderBy.mockReturnThis();
    mockLimit.mockReturnThis();
    mockStartAfter = jest.fn().mockReturnThis();
    mockCollection.mockImplementation(() => ({
      doc: mockDoc,
      where: mockWhere,
      orderBy: mockOrderBy,
      limit: mockLimit,
      startAfter: mockStartAfter,
      get: mockGet
    }));
  });
  
  // Ê∏¨Ë©¶?∏Ê?
  let mockRequest, mockResponse;
  let jsonSpy, statusJsonSpy;
  const testTenantId = 'test-tenant-id';
  const testStoreId = 'test-store-id';
  const testUserId = 'test-user-123';
  const testCategoryId = 'category-1';
  
  // ?µÂª∫Â∏∏Ë??ÑÊ∏¨Ë©¶Ë??ÆÂ??ÖÊï∏??
  const createTestMenuItem = (id, overrides = {}) => {
    const timestamp = new admin.firestore.Timestamp(Date.now() / 1000, 0);
    
    return {
      id: id || `item-${Math.random().toString(36).substring(2, 7)}`,
      tenantId: testTenantId,
      name: `Ê∏¨Ë©¶?ÅÈ? ${id}`,
      description: `Ê∏¨Ë©¶?ÅÈ? ${id} ?ÑÊ?Ëø∞`,
      categoryId: testCategoryId,
      categoryName: '‰∏ªË?',
      price: 50,
      stockStatus: 'in_stock',
      isRecommended: false,
      isSpecial: false,
      isActive: true,
      tags: ['?±È?', '?®Ëñ¶'],
      createdAt: timestamp,
      updatedAt: timestamp,
      ...overrides
    };
  };
  
  const setupMockRequestResponse = (queryParams = {}) => {
    // ?µÂª∫Ê®°Êì¨Ë´ãÊ??åÈüø??
    jsonSpy = jest.fn();
    statusJsonSpy = jest.fn().mockReturnValue({ json: jsonSpy });
    
    mockRequest = {
      user: {
        uid: testUserId,
        tenantId: testTenantId,
        storeId: testStoreId,
        role: 'tenant_admin'
      },
      query: {
        limit: 20,
        ...queryParams
      }
    };
    
    mockResponse = {
      status: statusJsonSpy,
      json: jsonSpy
    };
    
    return { mockRequest, mockResponse };
  };
  
  // Ê∏¨Ë©¶Ê°à‰?1: ?êÂ??≤Â??úÂñÆ?ÅÈ??óË°®ÔºàÁÑ°?éÊøæÊ¢ù‰ª∂Ôº?
  test('?êÂ??≤Â??úÂñÆ?ÅÈ??óË°®‰∏¶Ë???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItems = [
      createTestMenuItem('item-1'),
      createTestMenuItem('item-2'),
      createTestMenuItem('item-3')
    ];
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        testItems.forEach((item, index) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰?
    expect(mockCollection).toHaveBeenCalledWith('menuItems');
    expect(mockWhere).toHaveBeenCalledWith('tenantId', '==', testTenantId);
    expect(mockOrderBy).toHaveBeenCalledWith('categoryId', 'asc');
    expect(mockOrderBy).toHaveBeenCalledWith('name', 'asc');
    expect(mockLimit).toHaveBeenCalledWith(20);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(200);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: true,
      data: {
        items: expect.arrayContaining([
          expect.objectContaining({ id: 'item-1' }),
          expect.objectContaining({ id: 'item-2' }),
          expect.objectContaining({ id: 'item-3' })
        ]),
        pagination: {
          pageSize: 20,
          hasMore: false,
          lastVisible: expect.any(Object)
        }
      }
    });
    
    // È©óË?ËøîÂ??∏Ê??ÑÊ??ìÊà≥Â∑≤Ê†ºÂºèÂ?
    const responseData = jsonSpy.mock.calls[0][0].data.items;
    responseData.forEach(item => {
      expect(typeof item.createdAt).toBe('string');
      expect(typeof item.updatedAt).toBe('string');
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?2: ÁßüÊà∂?îÈõ¢
  test('ÁßüÊà∂?îÈõ¢ - ?™Ë??ûÁï∂?çÁ??∂Á??ÅÈ?', async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê? - Â∑≤Á??áË®≠ Firestore ?•Ë©¢?™Ë??ûÁï∂?çÁ??∂Á??ÖÁõÆ
    const testItems = [
      createTestMenuItem('item-1', { tenantId: testTenantId }),
      createTestMenuItem('item-2', { tenantId: testTenantId })
    ];
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        testItems.forEach((item) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰? - Ê™¢Êü•?ØÂê¶?âÁî®‰∫ÜÁ??∂È???
    expect(mockWhere).toHaveBeenCalledWith('tenantId', '==', testTenantId);
    
    // È©óË??øÊ? - ?âÂè™?ÖÂê´?∂Â?ÁßüÊà∂?ÑÂ???
    const responseData = jsonSpy.mock.calls[0][0].data.items;
    expect(responseData.length).toBe(2);
    responseData.forEach(item => {
      expect(item.tenantId).toBe(testTenantId);
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?3: ?ÜÈ??èËºØ (limit)
  test('?ÜÈ??èËºØ - ?πÊ? limit ?ÉÊï∏ËøîÂ?Ê≠?¢∫?ÑÊï∏??, async () => {
    // ?çÁΩÆÊØèÈ?10??
    const { mockRequest, mockResponse } = setupMockRequestResponse({
      limit: 10
    });
    
    // ?µÂª∫ 10 ?ãÊ∏¨Ë©¶Â???
    const testItems = Array.from({ length: 10 }, (_, i) => 
      createTestMenuItem(`item-${i+1}`)
    );
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        testItems.forEach((item) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??ÜÈ??ÉÊï∏
    expect(mockLimit).toHaveBeenCalledWith(10);
    
    // È©óË??øÊ?
    const responseData = jsonSpy.mock.calls[0][0].data;
    expect(responseData.items.length).toBe(10);
    expect(responseData.pagination).toEqual({
      pageSize: 10,
      hasMore: true,  // ?†ÁÇ∫ËøîÂ?‰∫ÜÂ?Â•ΩÁ???limit ?ÑÈ??ÆÊï∏
      lastVisible: expect.any(Object)
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?4: ?âÂ?È°ûID?éÊøæ
  test('?éÊøæÊ¢ù‰ª∂ - ?πÊ? categoryId ?éÊøæ', async () => {
    // ?çÁΩÆ?âÂ?È°ûID?éÊøæ
    const specificCategoryId = 'specific-category-id';
    const { mockRequest, mockResponse } = setupMockRequestResponse({
      categoryId: specificCategoryId
    });
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?ÔºàÈÉΩÂ±¨Êñº?å‰??ÜÈ?Ôº?
    const testItems = [
      createTestMenuItem('item-1', { categoryId: specificCategoryId }),
      createTestMenuItem('item-2', { categoryId: specificCategoryId })
    ];
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        testItems.forEach((item) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??éÊøæÊ¢ù‰ª∂
    expect(mockWhere).toHaveBeenCalledWith('categoryId', '==', specificCategoryId);
    
    // È©óË?ËøîÂ??ÑÊï∏?öÈÉΩÂ±¨Êñº?áÂ??ÜÈ?
    const responseData = jsonSpy.mock.calls[0][0].data.items;
    responseData.forEach(item => {
      expect(item.categoryId).toBe(specificCategoryId);
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?5: ?âÂ??®Á??ãÈ?Êø?
  test('?éÊøæÊ¢ù‰ª∂ - ?πÊ? isActive ?éÊøæ', async () => {
    // ?çÁΩÆ?™È°ØÁ§∫Â??®Á??ÅÈ?
    const { mockRequest, mockResponse } = setupMockRequestResponse({
      isActive: 'true' // ?•Ë©¢?ÉÊï∏?ØÂ?Á¨¶‰∏≤
    });
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?ÔºàÈÉΩ?ØÂ??®Á??ãÔ?
    const testItems = [
      createTestMenuItem('item-1', { isActive: true }),
      createTestMenuItem('item-2', { isActive: true })
    ];
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        testItems.forEach((item) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??éÊøæÊ¢ù‰ª∂ - Â≠óÁ¨¶‰∏?'true' ?âË??õÁÇ∫Â∏ÉÁàæ??true
    expect(mockWhere).toHaveBeenCalledWith('isActive', '==', true);
    
    // È©óË?ËøîÂ??ÑÊï∏?öÈÉΩ?ØÂ??®Á???
    const responseData = jsonSpy.mock.calls[0][0].data.items;
    responseData.forEach(item => {
      expect(item.isActive).toBe(true);
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?6: ?âÂ∫´Â≠òÁ??ãÈ?Êø?
  test('?éÊøæÊ¢ù‰ª∂ - ?πÊ? stockStatus ?éÊøæ', async () => {
    // ?çÁΩÆ?™È°ØÁ§∫ÁâπÂÆöÂ∫´Â≠òÁ??ãÁ??ÅÈ?
    const { mockRequest, mockResponse } = setupMockRequestResponse({
      stockStatus: 'low_stock'
    });
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?ÔºàÈÉΩ?ØÁõ∏?åÂ∫´Â≠òÁ??ãÔ?
    const testItems = [
      createTestMenuItem('item-1', { stockStatus: 'low_stock' }),
      createTestMenuItem('item-2', { stockStatus: 'low_stock' })
    ];
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        testItems.forEach((item) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??éÊøæÊ¢ù‰ª∂
    expect(mockWhere).toHaveBeenCalledWith('stockStatus', '==', 'low_stock');
    
    // È©óË?ËøîÂ??ÑÊï∏?öÈÉΩ?ØÁâπÂÆöÂ∫´Â≠òÁ???
    const responseData = jsonSpy.mock.calls[0][0].data.items;
    responseData.forEach(item => {
      expect(item.stockStatus).toBe('low_stock');
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?7: Ê∏∏Ê??ÜÈ?
  test('Ê∏∏Ê??ÜÈ? - ‰ΩøÁî® lastItemId ??lastCategoryId ?ÉÊï∏', async () => {
    // Ë®≠ÁΩÆÊ∏∏Ê??ÜÈ??ÉÊï∏
    const lastItemId = 'last-item-id';
    const lastCategoryId = 'last-category-id';
    const { mockRequest, mockResponse } = setupMockRequestResponse({
      lastItemId,
      lastCategoryId
    });
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê? - Ê®°Êì¨?ÄÂæå‰??ãÈ???
    const lastItem = createTestMenuItem(lastItemId, { 
      categoryId: lastCategoryId,
      name: 'Last Item Name'
    });
    
    // ?µÂª∫‰∏ã‰??ÅÁ??ÖÁõÆ
    const nextPageItems = [
      createTestMenuItem('next-item-1'),
      createTestMenuItem('next-item-2')
    ];
    
    // Ê®°Êì¨?≤Â?‰∏ä‰??ÅÊ?Âæå‰??ãÈ??ÆÁ??áÊ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => lastItem
    });
    
    // Ê®°Êì¨‰∏ã‰??ÅÊü•Ë©¢Á???
    mockGet.mockResolvedValueOnce({
      forEach: (callback) => {
        nextPageItems.forEach((item) => {
          callback({
            data: () => item,
            id: item.id
          });
        });
      }
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??ØÂê¶Ê≠?¢∫?≤Â?‰∫Ü‰?‰∏Ä?ÅÊ?Âæå‰??ãÈ???
    expect(mockDoc).toHaveBeenCalledWith(lastItemId);
    
    // È©óË??ØÂê¶Ê≠?¢∫Ë®≠ÁΩÆ‰∫?startAfter
    expect(mockStartAfter).toHaveBeenCalledWith(lastCategoryId, lastItem.name);
    
    // È©óË?ËøîÂ??ÑÊòØ‰∏ã‰??ÅÁ??∏Ê?
    const responseData = jsonSpy.mock.calls[0][0].data.items;
    expect(responseData.length).toBe(2);
    expect(responseData[0].id).toBe('next-item-1');
    expect(responseData[1].id).toBe('next-item-2');
  });
  
  // Ê∏¨Ë©¶Ê°à‰?8: Á©∫Â?Ë°®Ê?Ê≥?
  test('ËøîÂ?Á©∫Â?Ë°?- ?∂Êü•Ë©¢Á??úÁÇ∫Á©∫Ê?', async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - Á©∫Â?Ë°?
    mockGet.mockResolvedValueOnce({
      forEach: () => {} // Á©∫ÂáΩ?∏Ô?‰∏çË™ø?®Â?Ë™?
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(200);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: true,
      data: {
        items: [],
        pagination: {
          pageSize: 20,
          hasMore: false,
          lastVisible: null
        }
      }
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?9: ?°Ê??ÑÂ∫´Â≠òÁ??ãÂÄ?
  test('?ØË™§?ïÁ? - ?°Ê??ÑÂ∫´Â≠òÁ??ãÂÄºË???00?ØË™§', async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??- ‰ΩøÁî®?°Ê??ÑÂ∫´Â≠òÁ??ãÂÄ?
    const { mockRequest, mockResponse } = setupMockRequestResponse({
      stockStatus: 'invalid_status'
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(400);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: expect.stringContaining('?°Ê??ÑÂ∫´Â≠òÁ??ãÂÄ?)
    }));
  });
  
  // Ê∏¨Ë©¶Ê°à‰?10: ?®Êà∂Áº∫Â?ÁßüÊà∂ID
  test('?ØË™§?ïÁ? - ?∂Áî®?∂Áº∫Â∞ëÁ??∂ID?ÇÊ?ËøîÂ?500?ØË™§', async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ‰øÆÊîπË´ãÊ?Ôºå‰Ωø?®Êà∂Áº∫Â?ÁßüÊà∂ID
    mockRequest.user = {
      uid: testUserId,
      role: 'tenant_admin'
      // ?ÖÊ?‰∏çË®≠ÁΩ?tenantId
    };
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??øÊ? - Ê≥®Ê?ÔºöÁï∂?çÂØ¶?æÊòØ??500 ?ØË™§‰∏≠Ê??≤ÈÄôÁ®Æ?ÖÊ?ÔºåÊú™?éÁ¢∫?ïÁ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?
    }));
  });
  
  // Ê∏¨Ë©¶Ê°à‰?11: Firestore ?•Ë©¢Â§±Ê?
  test('?ØË™§?ïÁ? - ??Firestore ?•Ë©¢Â§±Ê??ÇÊ?ËøîÂ?500?ØË™§', async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢?ãÂá∫?∞Â∏∏
    const testError = new Error('?∏Ê?Â∫´Êü•Ë©¢Â§±??);
    mockGet.mockRejectedValueOnce(testError);
    
    // ?∑Ë?Ê∏¨Ë©¶
    await listMenuItems(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith(expect.objectContaining({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?,
      error: '?∏Ê?Â∫´Êü•Ë©¢Â§±??
    }));
  });
});

describe('MenuItem Handlers - getMenuItemById', () => {
  // Â∞éÂÖ•Ë¢´Ê∏¨Ë©¶Á??ïÁ???
  let { getMenuItemById } = require('../menuItem.handlers');
  
  // ?çÁΩÆ?Ä?âÊ®°??
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  // Ê∏¨Ë©¶?∏Ê?
  let mockRequest, mockResponse;
  let jsonSpy, statusJsonSpy;
  const testTenantId = 'test-tenant-id';
  const testStoreId = 'test-store-id';
  const testUserId = 'test-user-123';
  const testItemId = 'test-item-id';
  
  // ?µÂª∫Ê∏¨Ë©¶?úÂñÆ?ÅÈ??∏Ê?
  const createTestMenuItem = (overrides = {}) => {
    const timestamp = new admin.firestore.Timestamp(Date.now() / 1000, 0);
    
    return {
      id: testItemId,
      tenantId: testTenantId,
      name: 'Ê∏¨Ë©¶?ÅÈ?',
      description: 'Ê∏¨Ë©¶?ÅÈ??ÑÊ?Ëø?,
      categoryId: 'category-1',
      categoryName: '‰∏ªË?',
      price: 50,
      stockStatus: 'in_stock',
      isRecommended: false,
      isSpecial: false,
      isActive: true,
      tags: ['?±È?', '?®Ëñ¶'],
      createdAt: timestamp,
      updatedAt: timestamp,
      ...overrides
    };
  };
  
  const setupMockRequestResponse = (params = {}) => {
    // ?µÂª∫Ê®°Êì¨Ë´ãÊ??åÈüø??
    jsonSpy = jest.fn();
    statusJsonSpy = jest.fn().mockReturnValue({ json: jsonSpy });
    
    mockRequest = {
      user: {
        uid: testUserId,
        tenantId: testTenantId,
        storeId: testStoreId,
        role: 'tenant_admin'
      },
      params: {
        itemId: testItemId,
        ...params
      }
    };
    
    mockResponse = {
      status: statusJsonSpy,
      json: jsonSpy
    };
    
    return { mockRequest, mockResponse };
  };
  
  // Ê∏¨Ë©¶Ê°à‰?1: ?êÂ??≤Â??úÂñÆ?ÅÈ?
  test('?êÂ??≤Â??úÂñÆ?ÅÈ?‰∏¶Ë???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await getMenuItemById(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰?
    expect(mockCollection).toHaveBeenCalledWith('menuItems');
    expect(mockDoc).toHaveBeenCalledWith(testItemId);
    expect(mockGet).toHaveBeenCalled();
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(200);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: true,
      data: expect.objectContaining({
        id: testItemId,
        name: 'Ê∏¨Ë©¶?ÅÈ?',
        tenantId: testTenantId
      })
    });
    
    // È©óË??ÇÈ??≥Ê†ºÂºèÂ?
    const responseData = jsonSpy.mock.calls[0][0].data;
    expect(typeof responseData.createdAt).toBe('string');
    expect(typeof responseData.updatedAt).toBe('string');
  });
  
  // Ê∏¨Ë©¶Ê°à‰?2: ?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ?
  test('?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ??ÇË???04?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ‰∏çÂ??®Á??áÊ?
    mockGet.mockResolvedValueOnce({
      exists: false
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await getMenuItemById(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(404);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÖÁõÆ'
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?3: ÁßüÊà∂?îÈõ¢ - ?óË©¶Ë®™Â??∂‰?ÁßüÊà∂?ÑË??ÆÂ???
  test('ÁßüÊà∂?îÈõ¢: Ë®™Â??∂‰?ÁßüÊà∂?ÑË??ÆÂ??ÖÊ?ËøîÂ?403?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê? - Â±¨Êñº?∂‰?ÁßüÊà∂
    const otherTenantItem = createTestMenuItem({
      tenantId: 'other-tenant-id'
    });
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => otherTenantItem
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await getMenuItemById(mockRequest, mockResponse);
    
    // È©óË?ÁßüÊà∂?îÈõ¢Ê™¢Êü•
    expect(statusJsonSpy).toHaveBeenCalledWith(403);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: 'Ê≤íÊ?Ê¨äÈ?ÔºöÁÑ°Ê≥ïË®™?èÂÖ∂‰ªñÁ??∂Á??úÂñÆ?ÖÁõÆ'
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?4: Ë´ãÊ?Áº∫Â?ÂøÖË??ÑÈ???ID
  test('Áº∫Â?ÂøÖË??ÑÈ??ÆID?ÇË???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø?âÔ?‰ΩÜ‰??ê‰? itemId
    const { mockRequest, mockResponse } = setupMockRequestResponse({ itemId: undefined });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await getMenuItemById(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(400);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: 'Áº∫Â?ÂøÖË??ÑË??ÆÈ??ÆID?ÉÊï∏'
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?5: Firestore ?•Ë©¢Â§±Ê?
  test('Firestore ?•Ë©¢Â§±Ê??ÇË???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢Â§±Ê?
    const testError = new Error('?∏Ê?Â∫´Êü•Ë©¢Â§±??);
    mockGet.mockRejectedValueOnce(testError);
    
    // ?∑Ë?Ê∏¨Ë©¶
    await getMenuItemById(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?,
      error: '?∏Ê?Â∫´Êü•Ë©¢Â§±??
    });
  });
});

describe('MenuItem Handlers - updateMenuItem', () => {
  // Â∞éÂÖ•Ë¢´Ê∏¨Ë©¶Á??ïÁ???
  let { updateMenuItem } = require('../menuItem.handlers');
  
  // ?çÁΩÆ?Ä?âÊ®°??
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  // Ê∏¨Ë©¶?∏Ê?
  let mockRequest, mockResponse;
  let jsonSpy, statusJsonSpy;
  const testTenantId = 'test-tenant-id';
  const testStoreId = 'test-store-id';
  const testUserId = 'test-user-123';
  const testItemId = 'test-item-id';
  const testCategoryId = 'category-1';
  const testNewCategoryId = 'category-2';
  
  // ?µÂª∫Ê∏¨Ë©¶?úÂñÆ?ÅÈ??∏Ê?
  const createTestMenuItem = (overrides = {}) => {
    const timestamp = new admin.firestore.Timestamp(Date.now() / 1000, 0);
    
    return {
      id: testItemId,
      tenantId: testTenantId,
      name: 'Ê∏¨Ë©¶?ÅÈ?',
      description: 'Ê∏¨Ë©¶?ÅÈ??ÑÊ?Ëø?,
      categoryId: testCategoryId,
      categoryName: '‰∏ªË?',
      price: 50,
      stockStatus: 'in_stock',
      isRecommended: false,
      isSpecial: false,
      isActive: true,
      tags: ['?±È?', '?®Ëñ¶'],
      createdAt: timestamp,
      updatedAt: timestamp,
      ...overrides
    };
  };
  
  const setupMockRequestResponse = (itemId = testItemId, updateData = {}) => {
    // ?µÂª∫Ê®°Êì¨Ë´ãÊ??åÈüø??
    jsonSpy = jest.fn();
    statusJsonSpy = jest.fn().mockReturnValue({ json: jsonSpy });
    
    mockRequest = {
      user: {
        uid: testUserId,
        tenantId: testTenantId,
        storeId: testStoreId,
        role: 'tenant_admin'
      },
      params: { itemId },
      body: updateData
    };
    
    mockResponse = {
      status: statusJsonSpy,
      json: jsonSpy
    };
    
    return { mockRequest, mockResponse };
  };
  
  // Ê∏¨Ë©¶Ê°à‰?1: ?êÂ??¥Êñ∞?®Â?Ê¨Ñ‰?
  test('?êÂ??¥Êñ∞?®Â?Ê¨Ñ‰?‰∏¶Ë???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??- ?™Êõ¥?∞Â?Á®±Â??πÊ†º
    const updateData = {
      name: '?¥Êñ∞?ÑÂ??ÖÂ?Á®?,
      price: 60
    };
    const { mockRequest, mockResponse } = setupMockRequestResponse(testItemId, updateData);
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ?≤Â??æÊ??ÅÈ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?¥Êñ∞?ç‰?
    const mockUpdate = jest.fn().mockResolvedValue(true);
    mockDoc.mockReturnValue({
      get: mockGet,
      update: mockUpdate
    });
    
    // Ê®°Êì¨?≤Â??¥Êñ∞ÂæåÁ??ÅÈ?
    const updatedItem = {
      ...testItem,
      ...updateData,
      updatedAt: new admin.firestore.Timestamp(Date.now() / 1000 + 100, 0) // ?áË®≠?¥Êñ∞?ÇÈ?ÊØîÂâµÂª∫Ê??ìÊ?
    };
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => updatedItem
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰?
    expect(mockCollection).toHaveBeenCalledWith('menuItems');
    expect(mockDoc).toHaveBeenCalledWith(testItemId);
    expect(mockGet).toHaveBeenCalled();
    expect(mockUpdate).toHaveBeenCalled();
    
    // È©óË??¥Êñ∞?∏Ê?
    const updateArg = mockUpdate.mock.calls[0][0];
    expect(updateArg).toHaveProperty('name', '?¥Êñ∞?ÑÂ??ÖÂ?Á®?);
    expect(updateArg).toHaveProperty('price', 60);
    expect(updateArg).toHaveProperty('updatedAt');
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(200);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: true,
      message: '?úÂñÆ?ÅÈ??¥Êñ∞?êÂ?',
      data: expect.objectContaining({
        id: testItemId,
        name: '?¥Êñ∞?ÑÂ??ÖÂ?Á®?,
        price: 60
      })
    });
    
    // È©óË??ÇÈ??≥Ê†ºÂºèÂ?
    const responseData = jsonSpy.mock.calls[0][0].data;
    expect(typeof responseData.createdAt).toBe('string');
    expect(typeof responseData.updatedAt).toBe('string');
  });
  
  // Ê∏¨Ë©¶Ê°à‰?2: ?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ?
  test('?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ??ÇË???04?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ‰∏çÂ??®Á??áÊ?
    mockGet.mockResolvedValueOnce({
      exists: false
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(404);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ?'
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?3: ÁßüÊà∂?îÈõ¢ - ?óË©¶?¥Êñ∞?∂‰?ÁßüÊà∂?ÑË??ÆÂ???
  test('ÁßüÊà∂?îÈõ¢: ?¥Êñ∞?∂‰?ÁßüÊà∂?ÑË??ÆÂ??ÖÊ?ËøîÂ?403?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê? - Â±¨Êñº?∂‰?ÁßüÊà∂
    const otherTenantItem = createTestMenuItem({
      tenantId: 'other-tenant-id'
    });
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => otherTenantItem
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË?ÁßüÊà∂?îÈõ¢Ê™¢Êü•
    expect(statusJsonSpy).toHaveBeenCalledWith(403);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: 'Ê≤íÊ?Ê¨äÈ?ÔºöÁÑ°Ê≥ïÊõ¥?∞ÂÖ∂‰ªñÁ??∂Á??úÂñÆ?ÅÈ?'
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?4: ?¥Êñ∞CategoryID - ?êÂ?
  test('?êÂ??¥Êñ∞?ÜÈ?ID‰∏¶Â?Ê≠•Êõ¥?∞Â?È°ûÂ?Á®?, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶?∏Ê? - ?¥Êñ∞?ÜÈ?ID
    const updateData = {
      categoryId: testNewCategoryId
    };
    const { mockRequest, mockResponse } = setupMockRequestResponse(testItemId, updateData);
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ?≤Â??æÊ??ÅÈ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?≤Â??∞Â?È°?
    const newCategory = {
      id: testNewCategoryId,
      tenantId: testTenantId,
      name: '?∞Â?È°ûÂ?Á®?
    };
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => newCategory
    });
    
    // Ê®°Êì¨?¥Êñ∞?ç‰?
    const mockUpdate = jest.fn().mockResolvedValue(true);
    mockDoc.mockReturnValueOnce({
      get: mockGet,
      update: mockUpdate
    }).mockReturnValueOnce({
      get: mockGet
    }).mockReturnValueOnce({
      get: mockGet,
      update: mockUpdate
    });
    
    // Ê®°Êì¨?≤Â??¥Êñ∞ÂæåÁ??ÅÈ?
    const updatedItem = {
      ...testItem,
      categoryId: testNewCategoryId,
      categoryName: '?∞Â?È°ûÂ?Á®?,
      updatedAt: new admin.firestore.Timestamp(Date.now() / 1000 + 100, 0)
    };
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => updatedItem
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰?
    expect(mockCollection).toHaveBeenCalledWith('menuItems');
    expect(mockCollection).toHaveBeenCalledWith('menuCategories');
    expect(mockDoc).toHaveBeenCalledWith(testItemId);
    expect(mockDoc).toHaveBeenCalledWith(testNewCategoryId);
    
    // È©óË??¥Êñ∞?∏Ê??ÖÂê´categoryName
    const updateArg = mockUpdate.mock.calls[0][0];
    expect(updateArg).toHaveProperty('categoryId', testNewCategoryId);
    expect(updateArg).toHaveProperty('categoryName', '?∞Â?È°ûÂ?Á®?);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(200);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: true,
      message: '?úÂñÆ?ÅÈ??¥Êñ∞?êÂ?',
      data: expect.objectContaining({
        categoryId: testNewCategoryId,
        categoryName: '?∞Â?È°ûÂ?Á®?
      })
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?5: ?¥Êñ∞CategoryID - ?æ‰??∞Êñ∞?ÜÈ?
  test('?¥Êñ∞?ÜÈ?ID?ÇÊâæ‰∏çÂà∞?∞Â?È°ûË???04?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶?∏Ê? - ?°Ê??ÑÂ?È°ûID
    const updateData = {
      categoryId: 'non-existent-category'
    };
    const { mockRequest, mockResponse } = setupMockRequestResponse(testItemId, updateData);
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ?≤Â??æÊ??ÅÈ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?≤Â??∞Â?È°?- ‰∏çÂ???
    mockGet.mockResolvedValueOnce({
      exists: false
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(404);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '?áÂ??ÑÊñ∞?úÂñÆ?ÜÈ?‰∏çÂ???
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?6: ?¥Êñ∞CategoryID - ?∂‰?ÁßüÊà∂?ÑÂ?È°?
  test('?¥Êñ∞?ÜÈ?ID?Ç‰Ωø?®ÂÖ∂‰ªñÁ??∂Á??ÜÈ?ËøîÂ?403?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶?∏Ê? - ?∂‰?ÁßüÊà∂?ÑÂ?È°ûID
    const updateData = {
      categoryId: 'other-tenant-category'
    };
    const { mockRequest, mockResponse } = setupMockRequestResponse(testItemId, updateData);
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ?≤Â??æÊ??ÅÈ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?≤Â??∞Â?È°?- Â±¨Êñº?∂‰?ÁßüÊà∂
    const otherTenantCategory = {
      id: 'other-tenant-category',
      tenantId: 'other-tenant-id',
      name: '?∂‰?ÁßüÊà∂?ÑÂ?È°?
    };
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => otherTenantCategory
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(403);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: 'Ê≤íÊ?Ê¨äÈ?ÔºöÁÑ°Ê≥ï‰Ωø?®ÂÖ∂‰ªñÁ??∂Á??úÂñÆ?ÜÈ?'
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?7: Firestore ?¥Êñ∞Â§±Ê?
  test('Firestore ?¥Êñ∞Â§±Ê??ÇË???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    //
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ?ÅÈ?Â≠òÂú®
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?¥Êñ∞?ç‰?Â§±Ê?
    const mockUpdate = jest.fn().mockRejectedValue(new Error('?∏Ê?Â∫´Êõ¥?∞Â§±??));
    mockDoc.mockReturnValue({
      get: mockGet,
      update: mockUpdate
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await updateMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?,
      error: '?∏Ê?Â∫´Êõ¥?∞Â§±??
    });
  });
});

describe('MenuItem Handlers - deleteMenuItem', () => {
  // Â∞éÂÖ•Ë¢´Ê∏¨Ë©¶Á??ïÁ???
  let { deleteMenuItem } = require('../menuItem.handlers');
  
  // ?çÁΩÆ?Ä?âÊ®°??
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  // Ê∏¨Ë©¶?∏Ê?
  let mockRequest, mockResponse;
  let jsonSpy, statusJsonSpy;
  const testTenantId = 'test-tenant-id';
  const testUserId = 'test-user-123';
  const testItemId = 'test-item-id';
  
  // ?µÂª∫Ê∏¨Ë©¶?úÂñÆ?ÅÈ??∏Ê?
  const createTestMenuItem = (overrides = {}) => {
    const timestamp = new admin.firestore.Timestamp(Date.now() / 1000, 0);
    
    return {
      id: testItemId,
      tenantId: testTenantId,
      name: 'Ê∏¨Ë©¶?ÅÈ?',
      description: 'Ê∏¨Ë©¶?ÅÈ??ÑÊ?Ëø?,
      categoryId: 'category-1',
      categoryName: '‰∏ªË?',
      price: 50,
      stockStatus: 'in_stock',
      isRecommended: false,
      isSpecial: false,
      isActive: true,
      tags: ['?±È?', '?®Ëñ¶'],
      createdAt: timestamp,
      updatedAt: timestamp,
      ...overrides
    };
  };
  
  const setupMockRequestResponse = (itemId = testItemId) => {
    // ?µÂª∫Ê®°Êì¨Ë´ãÊ??åÈüø??
    jsonSpy = jest.fn();
    statusJsonSpy = jest.fn().mockReturnValue({ json: jsonSpy });
    
    mockRequest = {
      user: {
        uid: testUserId,
        tenantId: testTenantId,
        role: 'tenant_admin'
      },
      params: { itemId }
    };
    
    mockResponse = {
      status: statusJsonSpy,
      json: jsonSpy
    };
    
    return { mockRequest, mockResponse };
  };
  
  // Ê∏¨Ë©¶Ê°à‰?1: ?êÂ??™Èô§?úÂñÆ?ÅÈ?
  test('?êÂ??™Èô§?úÂñÆ?ÅÈ?‰∏¶Ë???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?™Èô§?ç‰?
    const mockDelete = jest.fn().mockResolvedValue(true);
    mockDoc.mockReturnValue({
      get: mockGet,
      delete: mockDelete
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await deleteMenuItem(mockRequest, mockResponse);
    
    // È©óË? Firestore ?ç‰?
    expect(mockCollection).toHaveBeenCalledWith('menuItems');
    expect(mockDoc).toHaveBeenCalledWith(testItemId);
    expect(mockGet).toHaveBeenCalled();
    expect(mockDelete).toHaveBeenCalled();
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(200);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: true,
      message: '?úÂñÆ?ÖÁõÆ test-item-id Â∑≤Ê??üÂà™??
    });
  });
  
  // Ê∏¨Ë©¶Ê°à‰?2: ?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ?
  test('?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ??ÇË???04?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ‰∏çÂ??®Á??áÊ?
    mockGet.mockResolvedValueOnce({
      exists: false
    });
    
    // Ê®°Êì¨?™Èô§?ç‰? (‰∏çÊ?Ë©≤Ë¢´Ë™øÁî®)
    const mockDelete = jest.fn();
    mockDoc.mockReturnValue({
      get: mockGet,
      delete: mockDelete
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await deleteMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(404);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '?æ‰??∞Ê?ÂÆöÁ??úÂñÆ?ÅÈ?'
    });
    
    // È©óË? delete ?πÊ??™Ë¢´Ë™øÁî®
    expect(mockDelete).not.toHaveBeenCalled();
  });
  
  // Ê∏¨Ë©¶Ê°à‰?3: ÁßüÊà∂?îÈõ¢ - ?óË©¶?™Èô§?∂‰?ÁßüÊà∂?ÑË??ÆÂ???
  test('ÁßüÊà∂?îÈõ¢: ?™Èô§?∂‰?ÁßüÊà∂?ÑË??ÆÂ??ÖÊ?ËøîÂ?403?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê? - Â±¨Êñº?∂‰?ÁßüÊà∂
    const otherTenantItem = createTestMenuItem({
      tenantId: 'other-tenant-id'
    });
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ?
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => otherTenantItem
    });
    
    // Ê®°Êì¨?™Èô§?ç‰? (‰∏çÊ?Ë©≤Ë¢´Ë™øÁî®)
    const mockDelete = jest.fn();
    mockDoc.mockReturnValue({
      get: mockGet,
      delete: mockDelete
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await deleteMenuItem(mockRequest, mockResponse);
    
    // È©óË?ÁßüÊà∂?îÈõ¢Ê™¢Êü•
    expect(statusJsonSpy).toHaveBeenCalledWith(403);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: 'Ê≤íÊ?Ê¨äÈ?ÔºöÁÑ°Ê≥ïÂà™?§ÂÖ∂‰ªñÁ??∂Á??úÂñÆ?ÅÈ?'
    });
    
    // È©óË? delete ?πÊ??™Ë¢´Ë™øÁî®
    expect(mockDelete).not.toHaveBeenCalled();
  });
  
  // Ê∏¨Ë©¶Ê°à‰?4: Firestore ?™Èô§Â§±Ê?
  test('Firestore ?™Èô§Â§±Ê??ÇË???00?Ä??, async () => {
    // Ê∫ñÂ?Ê∏¨Ë©¶Ë´ãÊ??åÈüø??
    const { mockRequest, mockResponse } = setupMockRequestResponse();
    
    // ?µÂª∫Ê∏¨Ë©¶?∏Ê?
    const testItem = createTestMenuItem();
    
    // Ê®°Êì¨ Firestore ?•Ë©¢ÁµêÊ? - ?ÅÈ?Â≠òÂú®
    mockGet.mockResolvedValueOnce({
      exists: true,
      data: () => testItem
    });
    
    // Ê®°Êì¨?™Èô§?ç‰?Â§±Ê?
    const mockDelete = jest.fn().mockRejectedValue(new Error('?∏Ê?Â∫´Âà™?§Â§±??));
    mockDoc.mockReturnValue({
      get: mockGet,
      delete: mockDelete
    });
    
    // ?∑Ë?Ê∏¨Ë©¶
    await deleteMenuItem(mockRequest, mockResponse);
    
    // È©óË??øÊ?
    expect(statusJsonSpy).toHaveBeenCalledWith(500);
    expect(jsonSpy).toHaveBeenCalledWith({
      success: false,
      message: '‰º∫Ê??®ÂÖß?®ÈåØË™?,
      error: '?∏Ê?Â∫´Âà™?§Â§±??
    });
  });
}); 
