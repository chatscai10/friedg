import apiClient from './api'; // Import the configured Axios instance
import { Employee } from '../types/employee';

// const API_BASE_URL = import.meta.env.VITE_API_BASE_URL; // No longer needed

// Assume pagination parameters are needed
interface GetEmployeesParams {
    page?: number;
    limit?: number;
    storeId?: string; // Filter by store
    role?: string;    // Filter by role
    // Add other potential query params
}

// Assume a structure for the response that includes pagination
interface EmployeesResponse {
    employees: Employee[];
    pagination: {
        currentPage: number;
        totalPages: number;
        totalItems: number;
        // Add other relevant fields
    };
}

// Fetch all employees with optional filtering and pagination
export const getEmployees = async (params?: GetEmployeesParams): Promise<EmployeesResponse> => {
    try {
        // Use apiClient
        const response = await apiClient.get<EmployeesResponse>('/admin/employees', { params });
        return response.data;
    } catch (error) {
        console.error("Error fetching employees:", error);
        throw error;
    }
};

// Fetch a single employee by ID
export const getEmployeeById = async (id: string): Promise<Employee> => {
    try {
        // Use apiClient
        const response = await apiClient.get<Employee>(`/admin/employees/${id}`);
        return response.data;
    } catch (error) {
        console.error(`Error fetching employee ${id}:`, error);
        throw error;
    }
};

// Create a new employee
// Use Omit to exclude fields generated by the backend
export const createEmployee = async (employeeData: Omit<Employee, 'id' | 'createdAt' | 'updatedAt'>): Promise<Employee> => {
    try {
        // Use apiClient
        const response = await apiClient.post<Employee>('/admin/employees', employeeData);
        return response.data;
    } catch (error) {
        console.error("Error creating employee:", error);
        throw error;
    }
};

// Update an existing employee
// Use Omit for fields that shouldn't be updated (like id, createdAt)
export const updateEmployee = async (id: string, employeeData: Partial<Omit<Employee, 'id' | 'createdAt' | 'updatedAt'>>): Promise<Employee> => {
    try {
        // Use apiClient
        const response = await apiClient.put<Employee>(`/admin/employees/${id}`, employeeData);
        return response.data;
    } catch (error) {
        console.error(`Error updating employee ${id}:`, error);
        throw error;
    }
};

// Delete an employee (consider soft delete vs hard delete)
export const deleteEmployee = async (id: string): Promise<void> => {
    try {
        // Use apiClient
        await apiClient.delete(`/admin/employees/${id}`);
    } catch (error) {
        console.error(`Error deleting employee ${id}:`, error);
        throw error;
    }
}; 