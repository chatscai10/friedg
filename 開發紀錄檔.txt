# 專案開發紀錄

## 2023-10-15
- 初始化Firebase專案
- 創建React前端應用
- 設定基本路由和頁面結構

## 2023-10-20
- 完成使用者認證機制
- 設計系統佈局和導航

## 2023-10-28
- 實現菜單管理功能
- 添加訂單管理系統基礎

## 2023-11-05
- 改善UI/UX設計
- 添加報表功能

## 2023-11-12
- 修復API連線問題
- 優化佔位圖片處理
- 佈署Firebase雲端

## 2023-11-18
- 實現全域API錯誤處理機制
  - 在api.ts中添加響應攔截器，自動處理API請求錯誤
  - 整合errorHandler.ts和NotificationContext，提供統一的錯誤訊息顯示
  - 增強404錯誤處理，為開發者提供更有用的控制台提示
- 改善UI體驗
  - 創建通用LoadingState和EmptyState組件
  - 更新MenuItemList頁面，添加空狀態和載入中狀態的友好提示
  - 優化菜單項目卡片設計，提升使用者體驗

## 待辦事項
- 實現前端數據緩存和模擬數據層
- 完善訂單處理流程
- 優化移動端響應式設計

[2025-05-09 22:35:42] 問題簡述: App.tsx 中存在 User 類型不匹配和 MenuItemForm 組件缺少必要 props 問題。 解決方式: 將 User 類型修正為 firebase.User，導入正確依賴；為 MenuItemForm 組件添加 onCancel 和 onSubmit，並通過 menuItem 屬性而非 isEdit 實現編輯模式。

[2025-05-09 22:05:18] 問題簡述: CouponTemplatesPage.tsx 中存在類型問題。 解決方式: 第101行 as any 類型斷言修正為 Omit<CouponTemplate, 'templateId' | 'createdAt' | 'updatedAt'>；第112行 handleFieldChange 的 value 參數類型修正為更精確的聯合類型；第151行 handleDistributionChannelChange 的 channel 參數使用精確的字面量聯合類型。

[2025-05-09 21:30:15] 問題簡述: LoyaltyRewardsPage.tsx 中存在類型問題。 解決方式: 第121行 createReward 方法參數類型修正為 Omit<LoyaltyReward, 'rewardId' | 'createdAt' | 'updatedAt'>；第140行巢狀屬性處理時添加 Record<string, unknown> 類型斷言，解決展開運算符類型問題。

[2025-05-09 21:15:32] 問題簡述: LoyaltyTierRulesPage.tsx 中存在 as any 及 value: any 類型問題。 解決方式: 第92行 as any修正為 Omit<LoyaltyTierRule, 'tierId' | 'createdAt' | 'updatedAt'>；第103行 handleFieldChange 的 value 參數類型修正為 string | number | boolean | string[]。

[2025-05-09 20:35:15] 問題簡述: 安裝並初步整合notistack通知系統與錯誤處理機制 解決方式: 成功安裝notistack v3.0.2，建立NotificationContext、errorHandler，整合至App.tsx，並新增NotificationExample及ErrorHandlingExample頁面與路由。

[2025-05-09 23:15:30] 問題簡述: 統一專案前端通知機制 解決方式: 將LoyaltyRewardsPage.tsx、CouponTemplatesPage.tsx和LoyaltyTierRulesPage.tsx中的通知實現統一為使用NotificationContext。修改包括：替換原生alert()為showSuccessNotification/showErrorNotification，將直接使用notistack的enqueueSnackbar替換為使用通知上下文，並加入錯誤處理器handleApiError以提供更詳細的錯誤信息。

[2025-05-09 23:50:15] 問題簡述: 修復Firebase環境配置問題與Vite環境變數處理 解決方式: 在package.json添加build:testing和deploy:testing腳本，確保構建時正確使用測試環境變數。修改firebaseConfig.ts，添加環境判斷邏輯(isTestingEnv, isDevelopment, isUsingEmulator)，確保測試環境正確連接Firebase模擬器，並在日誌中顯示環境變數狀態。通過為API密鑰添加備用值確保即使環境變數加載失敗也能使用硬編碼值。經測試，build:testing構建的應用程式成功識別測試環境並正確連接Firebase模擬器。

[2025-05-10 00:15:30] 問題簡述: PWA圖示問題修復與頁面路徑優化 解決方式: 在public/assets/創建logo192.svg、logo512.svg和maskable_icon.svg替代原有的PNG圖標文件，修改manifest.json中的圖示路徑為SVG格式。確認MainLayout.tsx中已將未實作的路徑(/inventory、/schedules、/reports)正確標記為「開發中」並禁用點擊。確認App.tsx中根路徑(/)正確指向DashboardPage，顯示系統概覽而非訂單管理。所有修改經build:testing驗證均無顯示問題。

[2025-05-11 10:30:15] 問題簡述: API服務使用錯誤的Base URL以及占位圖片無法載入問題。 解決方式: 修改api.ts中axios實例的baseURL配置，使用import.meta.env.VITE_API_BASE_URL環境變量並設置後備值為http://127.0.0.1:5003/friedg/us-central1/api。創建utils/placeholder.ts工具函數以提供本地占位圖片路徑，並在public/assets/images目錄下創建專業的placeholder.svg文件。更新MenuItemCard.tsx、MenuItemList.tsx和MenuItemForm.tsx中使用占位圖片的地方，替換為getPlaceholderImage()函數。測試證實API請求現在正確發往Firebase Functions模擬器，且占位圖片能夠正常顯示，不再依賴外部via.placeholder.com服務。

[2025-05-11 18:45:20] 問題簡述: 改進忠誠度和優惠券頁面的錯誤處理與加載體驗
解決方式: 
1. 全面優化三個關鍵列表頁面（LoyaltyTierRulesPage、LoyaltyRewardsPage、CouponTemplatesPage）的用戶體驗：
   - 實現精細化的載入狀態處理，區分首次加載和後續更新的視覺反饋
   - 當有現有數據時，在更新過程中僅顯示小型載入指示器而不替換整個頁面內容
   - 針對空數據添加友好的指引性提示，明確引導用戶創建第一個項目
   - 提供明確的刷新機制，讓用戶可以手動重新載入數據

2. 強化錯誤處理邏輯：
   - 將錯誤區分為致命錯誤（導致無數據可顯示）和非致命錯誤（仍有部分數據可顯示）
   - 對於致命錯誤，提供清晰的空狀態視圖和重試按鈕
   - 對於非致命錯誤，在頁面頂部顯示錯誤提示但保留現有數據顯示
   - 與全局錯誤處理機制和通知系統實現無縫集成

3. 修復CouponTemplatesPage中的類型安全問題：
   - 創建類型安全的幫助函數如getCouponTypeDisplayName和formatCouponValue
   - 替換了不安全的類型對比，避免了運行時類型錯誤
   - 確保所有UI交互元素遵循強類型設計

測試結果證實，這些頁面在各種情境下（首次加載、數據更新、API錯誤、空數據）均能提供連貫且專業的用戶體驗，不再出現白屏或不明確的錯誤提示。這些改進與先前在MenuItemList實現的模式保持一致，確保了整個應用的設計語言統一性。

[2025-05-12 10:30:00] 問題簡述: 緊急修復建置流程、API路由、類型定義和錯誤處理機制問題
解決方式:
1. 更新 `package.json` 建置流程:
   - 新增 `clean:build` 指令使用 rimraf 確保跨平台兼容性
   - 調整 `preview` 指令以支援 testing 模式並指定主機和端口
   - 安裝 rimraf 開發依賴以確保 `clean:build` 指令正常運作

2. Firebase 模擬器路由緊急修正:
   - 在 `functions/src/index.ts` 中添加 `/api/v1/menus/categories` 等P0 API路由
   - 實現標準化的 API 錯誤處理函數 `handleApiError`
   - 為關鍵API如忠誠度等級和優惠券模板增加模擬路由
   - 確保所有API響應遵循統一的數據格式（包含 data 和 meta）

3. 前端 TypeScript 類型定義優化:
   - 創建 `web-admin/src/types/api.types.ts` 定義標準API響應類型
   - 更新 `menuItem.ts` 使菜單分類類型與API規格一致
   - 新增分頁元數據類型 `PaginationMeta` 和API錯誤類型定義
   - 擴展 axios 模組以支援標準化的分頁和連結屬性，使用 $meta 和 $links

4. API 請求配置強化:
   - 創建 `web-admin/src/utils/api.ts` 實現 axios 實例
   - 智能配置 baseURL 以適應不同環境部署方式
   - 實現請求攔截器以記錄完整的API請求URL
   - 添加強化版響應攔截器支援自動重試機制（使用指數退避算法）
   - 提供詳細的錯誤報告機制，區分模擬模式與正常模式

驗證結果：
- API 請求現在能夠正確連接到 Firebase Functions 模擬器
- 創建資源的POST請求收到201狀態碼和正確格式的響應
- 重試機制成功處理暫時性的網絡問題
- 類型定義現在與API規格完全一致，提供了更好的開發體驗和錯誤預防
- 所有修改經過冒煙測試，確保與現有功能無衝突

注意：在 Windows PowerShell 中執行命令時，需要注意 `&&` 運算符不被支持，應使用分號或分步執行命令。例如:
```powershell
cd web-admin; npm run clean:build
npm run build:testing
npm run preview
```
而不是:
```bash
cd web-admin && npm run clean:build && npm run build:testing && npm run preview
```


